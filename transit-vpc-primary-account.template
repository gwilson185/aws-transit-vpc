{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "(SO0001) - Transit VPC: This template creates a dedicated transit VPC with Cisco CSRs for routing traffic. ***NOTE*** You must first subscribe to the appropriate Cisco CSR marketplace BYOL or License Included AMI from the AWS Marketplace before you launch this template. Version 3",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "Lab"
    },
    "TerminationProtection": {
      "Description": "Enable termination protection on the CSR EC2 instances to avoid accidential CSR termination?",
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ]
    },
    "PreferredPathTag": {
      "Description": "Tag to use to configure a preferred CSR VPN endpoint to control traffic flow through the Transit VPC CSRs (e.g. when integrating with stateful on-prem firewalls).",
      "Type": "String",
      "Default": "transitvpc:preferred-path"
    },
    "SpokeTag": {
      "Description": "Tag to use to identify spoke VPCs to connect to Transit VPC.",
      "Type": "String",
      "Default": "transitvpc:spoke"
    },
    "SpokeTagValue": {
      "Description": "Tag value to use to identify spoke VPCs to connect to Transit VPC.",
      "Type": "String",
      "Default": "true"
    },
    "RDTag": {
      "Description": "Tag to use to identify spoke VPCs Routing Domain in the Transit VPC.",
      "Type": "String",
      "Default": "transitvpc:rd"
    },
    "BgpAsn": {
      "Description": "BGP ASN to use for Transit VPC.",
      "Type": "String",
      "Default": "64512"
    },
    "VpcCidr": {
      "Description": "CIDR block for Transit VPC.",
      "Type": "String",
      "Default": "100.64.127.224/27"
    },
    "HostNameCsr1": {
      "Description": "Hostname for CSR1; Will be added to transit.entrustdatacard.cloud domain",
      "Type": "String",
      "Default": "csr1"
    },
    "HostNameCsr2": {
      "Description": "Hostname for CSR1; Will be added to transit.entrustdatacard.cloud domain",
      "Type": "String",
      "Default": "csr2"
    },
    "PubSubnet1": {
      "Description": "Address range for Transit VPC subnet to be created in AZ1.",
      "Type": "String",
      "Default": "100.64.127.224/28"
    },
    "PubSubnet2": {
      "Description": "Address range for Transit VPC subnet to be created in AZ2.",
      "Type": "String",
      "Default": "100.64.127.240/28"
    },
    "CSRType": {
      "Description": "Maximum network througput required for CSR instances.",
      "Type": "String",
      "Default": "2x500Mbps",
      "AllowedValues": [
        "2x500Mbps",
        "2x1Gbps",
        "2x2Gbps",
        "2x4.5Gbps"
      ]
    },
    "LicenseModel": {
      "Description": "Choose between BYOL (Bring Your Own License) and License Included license models. Remember to first subscribe the the appropriate Marketplace AMI!",
      "Type": "String",
      "Default": "LicenseIncluded",
      "AllowedValues": [
        "LicenseIncluded",
        "BYOL"
      ]
    },
    "S3Prefix": {
      "Description": "S3 prefix to append before S3 key names.",
      "Type": "String",
      "Default": "vpnconfigs/"
    },
    "AccountId": {
      "Description": "Another AWS Account ID to authorize access to VPN Config S3 bucket (for example bucket and KMS key policies).",
      "Type": "String",
      "Default": ""
    },
    "DCXVLAN": {
      "Description": "Direct Connect Virtual Interface VLAN",
      "Type": "String",
      "Default": "3809"
    },
    "DCXASN": {
      "Description": "Direct Connect Virtual Interface BGP ASN",
      "Type": "String",
      "Default": "65000"
    },
    "DCXBGPAuthKey": {
      "Description": "Direct Connect Virtual Interface BGP Authetication Key",
      "Type": "String",
      "Default": "0x9M3QVG.uNkgSjMZfViV7iF"
    },
    "DCXAWSAddress": {
      "Description": "Direct Connect Virtual Interface Amazon Peer IP",
      "Type": "String",
      "Default": "169.254.255.1/30"
    },
    "DCXCustAddress": {
      "Description": "Direct Connect Virtual Interface Customer Peer IP",
      "Type": "String",
      "Default": "169.254.255.2/30"
    },
    "DCXIPFamily": {
      "Description": "Direct Connect Virtual Interface IP Address Family",
      "Type": "String",
      "Default": "ipv4"
    },
    "SendAnonymousData": {
      "Description": "Choose to send anonymous data to AWS.",
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ]
    }
  },
  "Conditions": {
    "AuthorizeAnotherAccount": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AccountId"
            },
            ""
          ]
        }
      ]
    },
    "EnableTerm": {
      "Fn::Equals": [
        {
          "Ref": "TerminationProtection"
        },
        "Yes"
      ]
    },
    "SendData": {
      "Fn::Equals": [
        {
          "Ref": "SendAnonymousData"
        },
        "Yes"
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Cisco CSR Configuration"
          },
          "Parameters": [
            "CSRType",
            "KeyName",
            "LicenseModel",
            "TerminationProtection",
            "HostNameCsr1",
            "HostNameCsr2"
          ]
        },
        {
          "Label": {
            "default": "AWS Service Configuration"
          },
          "Parameters": [
            "S3Prefix",
            "AccountId"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VpcCidr",
            "PubSubnet1",
            "PubSubnet2",
            "BgpAsn",
            "SpokeTag",
            "SpokeTagValue",
            "RDTag",
            "PreferredPathTag"
          ]
        },
        {
          "Label": {
            "default": "Anonymous Metrics Request"
          },
          "Parameters": [
            "SendAnonymousData"
          ]
        }
      ],
      "ParameterLabels": {
        "BgpAsn": {
          "default": "Transit VPC BGP ASN"
        },
        "SpokeTag": {
          "default": "Spoke VPC Tag Name"
        },
        "SpokeTagValue": {
          "default": "Spoke VPC Tag Value"
        },
        "RDTag": {
          "default": "Route Domain Tag Name"
        },
        "PreferredPathTag": {
          "default": "Preferred VPN Endpoint Tag Name"
        },
        "VpcCidr": {
          "default": "Transit VPC CIDR Block"
        },
        "HostNameCsr1": {
          "default": "Csr1 Hostname"
        },
         "HostNameCsr2": {
          "default": "Csr2 Hostname"
        },
        "PubSubnet1": {
          "default": "1st Subnet Network"
        },
        "PubSubnet2": {
          "default": "2nd Subnet Network"
        },
        "CSRType": {
          "default": "CSR Throughput Requirements"
        },
        "KeyName": {
          "default": "SSH Key to access CSR"
        },
        "S3Prefix": {
          "default": "Prefix for S3 Objects"
        },
        "LicenseModel": {
          "default": "License Model"
        },
        "TerminationProtection": {
          "default": "Enable Termination Protection"
        },
        "AccountId": {
          "default": "Additional AWS Account ID (Optional)"
        },
        "DCXVLAN": {
          "default": "Direct Connect VLAN to be used to establish L2 Connectivity w/ Customer"
        },
        "DCXASN": {
          "default": "BGP ASN configured on Customer side"
        },
        "DCXBGPAuthKey": {
          "default": "Authentication Key for BGP sessions"
        },
        "DCXIPFamily": {
          "default": "Network Address Family that will be used"
        },
        "DCXAWSAddress": {
          "default": "Peer address that will be used by Amazon"
        },
        "DCXCustAddress": {
          "default": "Peer address that will be used by Customer"
        }
      }
    }
  },
  "Mappings": {
    "Function": {
      "DCX-Helper": {
        "CodeRegion": "us-east-1",
        "Name": "dcxhelper",
        "Description": "This function is invoked in Cloudformation to Create or Delete DCX VIFs",
        "Runtime": "python2.7",
        "Timeout": "300",
        "MemorySize": "128"
      },
      "Configurator": {
        "CodeLocation": "edc-lambdacode/transit-vpc-push-cisco-config.py.zip",
        "CodeRegion": "us-east-1",
        "Name": "cisco-configurator",
        "Description": "Transit VPC: This function is invoked when a generic VPN configuration is placed in an S3 bucket - it converts the generic information into Cisco IOS specific commands and pushes the config to transit VPC routers.",
        "Runtime": "python2.7",
        "Timeout": "300",
        "MemorySize": "128"
      },
      "AccountUpdate": {
        "CodeLocation": "edc-lambdacode/account-perm-update.py",
        "CodeRegion": "us-east-1",
        "Name": "AccountPolicyUpdater",
        "Description": "Transit VPC: AccountPolicyUpdater function responsible for updating Cross-Account Policy for VGW Poller.",
        "Runtime": "python2.7",
        "Timeout": "120",
        "MemorySize": "128"
      },
      "Poller": {
        "CodeLocation": "edc-lambdacode/transit-vpc-poller.py",
        "CodeRegion": "us-east-1",
        "Name": "vgw-poller",
        "Description": "Transit VPC: Poller function responsible for identifying specifically tagged VGWs and creating VPN connections to transit VPC.",
        "Runtime": "python2.7",
        "Timeout": "120",
        "MemorySize": "128"
      },
      "PeeringManager": {
        "CodeLocation": "edc-lambdacode/peering-manager.py",
        "CodeRegion": "us-east-1",
        "Name": "peering-manager",
        "Description": "Transit VPC: Peering Manager updates Peering when new VPNs are added or relationships are changed.",
        "Runtime": "python2.7",
        "Timeout": "120",
        "MemorySize": "128"
      },
      "FindReplace": {
        "S3BucketID": "%BUCKET_NAME%",
        "S3PrefixID": "%PREFIX%",
        "AccountUpdatePolicyName": "%POLICY_NAME%",
        "AccountUpdateRoleName": "%ROLE_NAME%",
        "Deliminator": "|"
      },
      "Csr": {
        "UserName": "automate",
        "PasswordLength": "15",
        "PrivateKey": "prikey.pem",
        "PublicKey": "pubkey.pem"
      }
    },
     "RouteDomains": {
      "Development": {
        "Name" : "development",
        "RDNum": "100"
      },
       "DevelopmentMgmt": {
        "Name" : "development-mgmt",
        "RDNum": "101"
      },
       "Production": {
        "Name" : "production",
        "RDNum": "102"
      },
       "ProductionMgmt": {
        "Name" : "production-mgmt",
        "RDNum": "103"
      }
    },
    "VPN": {
      "EdcDcxDevCsr1": {
        "EndPointIp": "10.0.252.18",
        "PreSharedKey": "0Qp8RswnEmDxlaCurwiL2VJS",
        "CsrTunnelIp": "10.251.1.126",
        "CsrTunnelIpMask": "255.255.255.252",
        "EdcTunnelIp": "10.251.1.125",
        "EdcTunnelIpMask": "255.255.255.252",
        "EdcBgpAsn": "65000"
      },
      "EdcDcxDevCsr2": {
        "EndPointIp": "10.0.252.18",
        "PreSharedKey": "0Qp8RswnEmDxlaCurwiL2VJS",
        "CsrTunnelIp": "10.251.1.134",
        "CsrTunnelIpMask" : "255.255.255.252",
        "EdcTunnelIp": "10.251.1.133",
        "EdcTunnelIpMask": "255.255.255.252",
        "EdcBgpAsn": "65000"
      },
      "EdcDcxMgmtCsr1": {
        "EndPointIp": "10.0.252.18",
        "PreSharedKey": "0Qp8RswnEmDxlaCurwiL2VJS",
        "CsrTunnelIp": "10.251.1.130",
        "CsrTunnelIpMask" : "255.255.255.252",
        "EdcTunnelIp": "10.251.1.129",
        "EdcTunnelIpMask": "255.255.255.252",
        "EdcBgpAsn": "65000"
      },
      "EdcDcxMgmtCsr2": {
        "EndPointIp": "10.0.252.18",
        "PreSharedKey": "0Qp8RswnEmDxlaCurwiL2VJS",
        "CsrTunnelIp": "10.251.1.138",
        "CsrTunnelIpMask" : "255.255.255.252",
        "EdcTunnelIp": "10.251.1.137",
        "EdcTunnelIpMask": "255.255.255.252",
        "EdcBgpAsn": "65000"
      },
      "EdcBakupCsr1": {
        "EndPointIp": "204.124.81.200",
        "PreSharedKey": "0Qp8RswnEmDxlaCurwiL2VJS",
        "CsrTunnelIp": "10.251.1.122",
        "CsrTunnelIpMask" : "255.255.255.252",
        "EdcTunnelIp": "10.251.1.121",
        "EdcTunnelIpMask": "255.255.255.252",
        "EdcBgpAsn": "65000"
      },
      "EdcBakupCsr2": {
        "EndPointIp": "204.124.81.200",
        "PreSharedKey": "0Qp8RswnEmDxlaCurwiL2VJS",
        "CsrTunnelIp": "10.251.1.142",
        "CsrTunnelIpMask" : "255.255.255.252",
        "EdcTunnelIp": "10.251.1.141",
        "EdcTunnelIpMask": "255.255.255.252",
        "EdcBgpAsn": "65000"
      }
    },
    "CiscoCsrAMI": {
      "us-east-1": {
        "BYOL": "ami-23f79835",
        "LicenseIncluded": "ami-d5fa95c3"
      },
      "us-east-2": {
        "BYOL": "ami-541e3931",
        "LicenseIncluded": "ami-051c3b60"
      },
      "us-west-2": {
        "BYOL": "ami-119b0071",
        "LicenseIncluded": "ami-33e57e53"
      },
      "us-west-1": {
        "BYOL": "ami-dc9bbcbc",
        "LicenseIncluded": "ami-9b9abdfb"
      },
      "eu-west-1": {
        "BYOL": "ami-48f2ff2e",
        "LicenseIncluded": "ami-d5f1fcb3"
      },
      "eu-west-2": {
        "BYOL": "ami-35a5b151",
        "LicenseIncluded": "ami-5fb9ad3b"
      },
      "eu-central-1": {
        "BYOL": "ami-7b27f814",
        "LicenseIncluded": "ami-a72bf4c8"
      },
      "ca-central-1": {
        "BYOL": "ami-ab8d31cf",
        "LicenseIncluded": "ami-9f8c30fb"
      },
      "ap-south-1": {
        "BYOL": "ami-25d1a34a",
        "LicenseIncluded": "ami-8ded9fe2"
      },
      "ap-southeast-1": {
        "BYOL": "ami-bf269cdc",
        "LicenseIncluded": "ami-99209afa"
      },
      "ap-southeast-2": {
        "BYOL": "ami-62cec501",
        "LicenseIncluded": "ami-d6cfc4b5"
      },
      "ap-northeast-1": {
        "BYOL": "ami-827041e5",
        "LicenseIncluded": "ami-b57544d2"
      },
      "ap-northeast-2": {
        "BYOL": "ami-60a77a0e",
        "LicenseIncluded": "ami-8ca479e2"
      },
      "sa-east-1": {
        "BYOL": "ami-43b6da2f",
        "LicenseIncluded": "ami-eab6da86"
      }
    },
    "CsrInstance": {
      "CSR1": {
        "IPAddress" : "100.64.127.233",
        "ENIAddress" : "100.64.127.234",
        "EIPAlloc" : "eipalloc-8c5c39b9",
        "EIP": "34.206.76.106"
      },
      "CSR2": {
        "IPAddress": "100.64.127.249",
        "ENIAddress": "100.64.127.250",
        "EIPAlloc" : "eipalloc-095e3b3c",
        "EIP" : "52.6.27.250"
      },
      "2x500Mbps": {
        "Type": "c4.large",
        "Bandwidth": "500000"
      },
      "2x1Gbps": {
        "Type": "c4.xlarge",
        "Bandwidth": "1000000"
      },
      "2x2Gbps": {
        "Type": "c4.2xlarge",
        "Bandwidth": "2000000"
      },
      "2x4.5Gbps": {
        "Type": "c4.4xlarge",
        "Bandwidth": "4500000"
      }
    }
  },
  "Resources": {
    "RouteDomainList": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "rd_name",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "rd_name",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      }
    },
    "VPNConfigS3Bucket": {
      "Type": "AWS::S3::Bucket"
    },
    "VPNConfigBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "VPNConfigS3Bucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "DenyUnEncryptedObjectUploads",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "VPNConfigS3Bucket"
                    },
                    "/",
                    {
                      "Ref": "S3Prefix"
                    },
                    "*"
                  ]
                ]
              },
              "Condition": {
                "StringNotEquals": {
                  "s3:x-amz-server-side-encryption": "aws:kms"
                }
              }
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "VPNConfigS3Bucket"
                    },
                    "/",
                    {
                      "Ref": "S3Prefix"
                    },
                    "*"
                  ]
                ]
              },
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Fn::If": [
                            "AuthorizeAnotherAccount",
                            {
                              "Ref": "AccountId"
                            },
                            {
                              "Ref": "AWS::AccountId"
                            }
                          ]
                        },
                        ":root"
                      ]
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "KMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "TransitVPC CMK for S3 SSE-KMS",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "transit-vpc-1",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":root"
                      ]
                    ]
                  }
                ]
              },
              "Action": [
                "kms:*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Fn::If": [
                            "AuthorizeAnotherAccount",
                            {
                              "Ref": "AccountId"
                            },
                            {
                              "Ref": "AWS::AccountId"
                            }
                          ]
                        },
                        ":root"
                      ]
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "SolutionHelperRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "CiscoConfigFunctionRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "TransitVpcPollerRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "KMSKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Ref": "KMSKey"
        }
      }
    },
    "TransitVGW": {
      "Type": "AWS::EC2::VPNGateway",
      "Properties": {
        "Type": "ipsec.1"
      }
    },
    "TransitVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Transit VPC"
          }
        ]
      }
    },
    "AttachVGWGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "TransitVPC"
        },
        "VpnGatewayId": {
          "Ref": "TransitVGW"
        }
      }
    },
    "VPCPubSub1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "TransitVPC"
        },
        "CidrBlock": {
          "Ref": "PubSubnet1"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "Transit VPC Subnet1"
          }
        ]
      }
    },
    "VPCPubSub2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "TransitVPC"
        },
        "CidrBlock": {
          "Ref": "PubSubnet2"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "Transit VPC Subnet2"
          }
        ]
      }
    },
    "IGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Transit VPC IGW"
          }
        ]
      }
    },
    "IGWToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "TransitVPC"
        },
        "InternetGatewayId": {
          "Ref": "IGW"
        }
      }
    },
    "VPCRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "TransitVPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "Transit VPC"
          }
        ]
      }
    },
    "VPCPublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "IGW"
        }
      }
    },
    "S3Endpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "RouteTableIds": [
          {
            "Ref": "VPCRouteTable"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".s3"
            ]
          ]
        },
        "VpcId": {
          "Ref": "TransitVPC"
        }
      }
    },
    "DynamoDBEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "RouteDomainList"
                    }
                  ]
                ]
              }
            }
          ]
        },
        "RouteTableIds": [
          {
            "Ref": "VPCRouteTable"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".dynamodb"
            ]
          ]
        },
        "VpcId": {
          "Ref": "TransitVPC"
        }
      }
    },
    "VPCPubSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "VPCPubSub1"
        },
        "RouteTableId": {
          "Ref": "VPCRouteTable"
        }
      }
    },
    "VPCPubSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "VPCPubSub2"
        },
        "RouteTableId": {
          "Ref": "VPCRouteTable"
        }
      }
    },
    "VGWRoutePropagation": {
      "Type": "AWS::EC2::VPNGatewayRoutePropagation",
      "DependsOn" : "AttachVGWGateway",
      "Properties": {
        "RouteTableIds":[
          {
            "Ref": "VPCRouteTable"
          }],
        "VpnGatewayId": {
          "Ref": "TransitVGW"
        }
      }
    },
    "Eip1Association":{
       "Type": "AWS::EC2::EIPAssociation",
    "Properties":{
    "AllocationId" : {"Fn::FindInMap":["CsrInstance","CSR1","EIPAlloc"]},
    "InstanceId": {"Ref": "VpcCsr1"},
    "PrivateIpAddress": {"Fn::GetAtt": ["VpcCsr1","PrivateIp"]}
  }
},
    "Eip2Association":{
       "Type": "AWS::EC2::EIPAssociation",
    "Properties":{
    "AllocationId" : {"Fn::FindInMap":["CsrInstance","CSR2","EIPAlloc"]},
    "InstanceId": {"Ref": "VpcCsr2"},
    "PrivateIpAddress": {"Fn::GetAtt": ["VpcCsr2","PrivateIp"]}
  }
},
    "VpcCsr1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "Comment1": "Launch Cisco CSR1"
      },
      "Properties": {
        "InstanceType": {
          "Fn::FindInMap": [
            "CsrInstance",
            {
              "Ref": "CSRType"
            },
            "Type"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "DisableApiTermination": {
          "Fn::If": [
            "EnableTerm",
            true,
            false
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "CiscoCsrAMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "LicenseModel"
            }
          ]
        },
        "SubnetId": {
          "Ref": "VPCPubSub1"
        },
        "SecurityGroupIds": [
          {
            "Ref": "CSRSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Transit VPC CSR1"
          }
        ],
        "PrivateIpAddress": {"Fn::FindInMap": ["CsrInstance","CSR1","IPAddress"]},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "ios-config-1=\"username ",
                {
                  "Fn::FindInMap": [
                    "Function",
                    "Csr",
                    "UserName"
                  ]
                },
                " priv 15 pass ",
                {
                  "Fn::GetAtt": [
                    "CreateRandomPassword",
                    "Password"
                  ]
                },
                "\"\n",
                "ios-config-2=\"service password-encryption\"\n",
                "ios-config-3=\"crypto isakmp policy 200\"\n",
                "ios-config-4=\"encryption aes 256\"\n",
                "ios-config-5=\"authentication pre-share\"\n",
                "ios-config-6=\"group 2\"\n",
                "ios-config-7=\"lifetime 28800\"\n",
                "ios-config-8=\"hash sha\"\n",
                "ios-config-9=\"crypto isakmp policy 300\"\n",
                "ios-config-10=\"encryption aes 128\"\n",
                "ios-config-11=\"authentication pre-share\"\n",
                "ios-config-12=\"group 2\"\n",
                "ios-config-13=\"lifetime 28800\"\n",
                "ios-config-14=\"hash sha\"\n",
                "ios-config-15=\"crypto ipsec transform-set ipsec-prop-vpn-aws esp-aes 128 esp-sha256-hmac\"\n",
                "ios-config-16=\"mode tunnel\"\n",
                "ios-config-17=\"crypto ipsec df-bit clear\"\n",
                "ios-config-18=\"crypto isakmp keepalive 15 10 on-demand\"\n",
                "ios-config-19=\"crypto ipsec security-association replay window-size 1024\"\n",
                "ios-config-20=\"crypto ipsec fragmentation before-encryption\"\n",
                "ios-config-21=\"crypto ipsec profile ipsec-vpn-aws\"\n",
                "ios-config-22=\"set pfs group2\"\n",
                "ios-config-23=\"set security-association lifetime seconds 3600\"\n",
                "ios-config-24=\"set transform-set ipsec-prop-vpn-aws\"\n",
                "ios-config-25=\"crypto ipsec profile ipsec-vpn-edc\"\n",
                "ios-config-26=\"set pfs group2\"\n",
                "ios-config-27=\"set security-association lifetime seconds 3600\"\n",
                "ios-config-28=\"set transform-set ipsec-prop-vpn-edc\"\n",
                "ios-config-29=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","Development","Name"]},"\"\n",
                "ios-config-30=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","Development","RDNum"]},"\"\n",
                "ios-config-31=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","DevelopmentMgmt","Name"]},"\"\n",
                "ios-config-32=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","DevelopmentMgmt","RDNum"]},"\"\n",
                "ios-config-33=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","Production","Name"]},"\"\n",
                "ios-config-34=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","Production","RDNum"]},"\"\n",
                "ios-config-35=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","ProductionMgmt","Name"]},"\"\n",
                "ios-config-36=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","ProductionMgmt","RDNum"]},"\"\n",
                "ios-config-37=\"router bgp ",
                {
                  "Ref": "BgpAsn"
                },
                "\"\n",
                "ios-config-38=\"bgp log-neighbor-changes\"\n",
                "ios-config-39=\"ip vrf vpn0\"\n",
                "ios-config-40=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":0\"\n",
                "ios-config-41=\"ip ssh pubkey-chain\"\n",
                "ios-config-42=\"username ",
                {
                  "Fn::FindInMap": [
                    "Function",
                    "Csr",
                    "UserName"
                  ]
                },
                "\"\n",
                "ios-config-43=\"key-hash ssh-rsa ",
                {
                  "Fn::GetAtt": [
                    "CreateRsaKey",
                    "Fingerprint"
                  ]
                },
                "\"\n",
                "ios-config-44=\"ip ssh server algorithm authentication publickey\"\n",
                "ios-config-45=\"ip ssh maxstartups 1\"\n"
              ]
            ]
          }
        }
      }
    },
    "VpcCsr2": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "Comment1": "Launch Cisco CSR2"
      },
      "Properties": {
        "InstanceType": {
          "Fn::FindInMap": [
            "CsrInstance",
            {
              "Ref": "CSRType"
            },
            "Type"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "DisableApiTermination": {
          "Fn::If": [
            "EnableTerm",
            true,
            false
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "CiscoCsrAMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "LicenseModel"
            }
          ]
        },
        "SubnetId": {
          "Ref": "VPCPubSub2"
        },
        "SecurityGroupIds": [
          {
            "Ref": "CSRSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Transit VPC CSR2"
          }
        ],
        "PrivateIpAddress": {"Fn::FindInMap": ["CsrInstance","CSR2","IPAddress"]},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "ios-config-1=\"username ",
                {
                  "Fn::FindInMap": [
                    "Function",
                    "Csr",
                    "UserName"
                  ]
                },
                " priv 15 pass ",
                {
                  "Fn::GetAtt": [
                    "CreateRandomPassword",
                    "Password"
                  ]
                },
                "\"\n",
                "ios-config-2=\"service password-encryption\"\n",
                "ios-config-3=\"crypto isakmp policy 200\"\n",
                "ios-config-4=\"encryption aes 256\"\n",
                "ios-config-5=\"authentication pre-share\"\n",
                "ios-config-6=\"group 2\"\n",
                "ios-config-7=\"lifetime 28800\"\n",
                "ios-config-8=\"hash sha\"\n",
                "ios-config-9=\"crypto isakmp policy 300\"\n",
                "ios-config-10=\"encryption aes 128\"\n",
                "ios-config-11=\"authentication pre-share\"\n",
                "ios-config-12=\"group 2\"\n",
                "ios-config-13=\"lifetime 28800\"\n",
                "ios-config-14=\"hash sha\"\n",
                "ios-config-15=\"crypto ipsec transform-set ipsec-prop-vpn-aws esp-aes 128 esp-sha256-hmac\"\n",
                "ios-config-16=\"mode tunnel\"\n",
                "ios-config-17=\"crypto ipsec df-bit clear\"\n",
                "ios-config-18=\"crypto isakmp keepalive 15 10 on-demand\"\n",
                "ios-config-19=\"crypto ipsec security-association replay window-size 1024\"\n",
                "ios-config-20=\"crypto ipsec fragmentation before-encryption\"\n",
                "ios-config-21=\"crypto ipsec profile ipsec-vpn-aws\"\n",
                "ios-config-22=\"set pfs group2\"\n",
                "ios-config-23=\"set security-association lifetime seconds 3600\"\n",
                "ios-config-24=\"set transform-set ipsec-prop-vpn-aws\"\n",
                "ios-config-25=\"crypto ipsec profile ipsec-vpn-edc\"\n",
                "ios-config-26=\"set pfs group2\"\n",
                "ios-config-27=\"set security-association lifetime seconds 3600\"\n",
                "ios-config-28=\"set transform-set ipsec-prop-vpn-edc\"\n",
                "ios-config-29=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","Development","Name"]},"\"\n",
                "ios-config-30=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","Development","RDNum"]},"\"\n",
                "ios-config-31=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","DevelopmentMgmt","Name"]},"\"\n",
                "ios-config-32=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","DevelopmentMgmt","RDNum"]},"\"\n",
                "ios-config-33=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","Production","Name"]},"\"\n",
                "ios-config-34=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","Production","RDNum"]},"\"\n",
                "ios-config-35=\"ip vrf ",{"Fn::FindInMap":["RouteDomains","ProductionMgmt","Name"]},"\"\n",
                "ios-config-36=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":",{"Fn::FindInMap":["RouteDomains","ProductionMgmt","RDNum"]},"\"\n",
                "ios-config-37=\"router bgp ",
                {
                  "Ref": "BgpAsn"
                },
                "\"\n",
                "ios-config-38=\"bgp log-neighbor-changes\"\n",
                "ios-config-39=\"ip vrf vpn0\"\n",
                "ios-config-40=\"rd ",
                {
                  "Ref": "BgpAsn"
                },
                ":0\"\n",
                "ios-config-41=\"ip ssh pubkey-chain\"\n",
                "ios-config-42=\"username ",
                {
                  "Fn::FindInMap": [
                    "Function",
                    "Csr",
                    "UserName"
                  ]
                },
                "\"\n",
                "ios-config-43=\"key-hash ssh-rsa ",
                {
                  "Fn::GetAtt": [
                    "CreateRsaKey",
                    "Fingerprint"
                  ]
                },
                "\"\n",
                "ios-config-44=\"ip ssh server algorithm authentication publickey\"\n",
                "ios-config-45=\"ip ssh maxstartups 1\"\n"
              ]
            ]
          }
        }
      }
    },
    "Csr1PublicDNSRecord":{
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn": "Eip1Association",
      "Properties": {
        "HostedZoneId": "ZLP98P780ZWPQ",
        "Name": { "Fn::Join": ["",[{"Ref":"HostNameCsr1"},".transit.entrustdatacard.cloud."]]},
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [{"Fn::FindInMap":["CsrInstance","CSR1","EIP"]}]
      }
    },
    "Csr2PublicDNSRecord":{
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn": "Eip2Association",
      "Properties": {
        "HostedZoneId": "ZLP98P780ZWPQ",
        "Name": { "Fn::Join": ["",[{"Ref":"HostNameCsr2"},".transit.entrustdatacard.cloud."]]},
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [{"Fn::FindInMap":["CsrInstance","CSR2","EIP"]}]
      }
    },
    "Csr1IntDNSRecord":{
      "Type" : "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "ZLP98P780ZWPQ",
        "Name": { "Fn::Join": ["",[{"Ref":"HostNameCsr1"},"-int.transit.entrustdatacard.cloud."]]},
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [{"Fn::GetAtt":["VpcCsr1","PrivateIp"]}]
      }
    },
    "Csr2IntDNSRecord":{
      "Type" : "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "ZLP98P780ZWPQ",
        "Name": { "Fn::Join": ["",[{"Ref":"HostNameCsr2"},"-int.transit.entrustdatacard.cloud."]]},
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [{"Fn::GetAtt":["VpcCsr2","PrivateIp"]}]
      }
    },
    "SolutionHelperRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "SolutionHelperRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "SolutionHelperRole"
          }
        ],
        "PolicyName": "Solution_Helper_Permissions",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutBucketNotification"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "VPNConfigS3Bucket"
                    }
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:*",
                "events:*",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "iam:PassRole"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CiscoConfigFunctionRole",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TransitVpcPollerRole",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TransitVpcAccountUpdateRole",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "VPNConfigS3Bucket"
                    },
                    "/",
                    {
                      "Ref": "S3Prefix"
                    },
                    "*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": "arn:aws:s3:::edc-lambdacode/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "RouteDomainList"
                    }
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "SolutionHelper": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "SolutionHelperRolePolicy",
      "Properties": {
        "Handler": "solution-helper.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SolutionHelperRole",
            "Arn"
          ]
        },
        "Description": "Transit VPC: CloudFormation custom resource function invoked during transit VPC CloudFormation create, update, and delete stack operations.",
        "Code": {
          "S3Bucket": "edc-lambdacode",
          "S3Key": "solutionhelper.zip"
        },
        "Runtime": "python2.7",
        "Timeout": "60"
      }
    },
    "CreateRsaKey": {
      "Type": "Custom::LoadLambda",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "CreateSshKey": {
          "Fn::Join": [
            "",
            [
              "{ 'Bucket' : '",
              {
                "Ref": "VPNConfigS3Bucket"
              },
              "', ",
              "'SSEKMSKeyId' : 'arn:aws:kms:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":key/",
              {
                "Ref": "KMSKey"
              },
              "', ",
              "'PrivateKey' : '",
              {
                "Ref": "S3Prefix"
              },
              {
                "Fn::FindInMap": [
                  "Function",
                  "Csr",
                  "PrivateKey"
                ]
              },
              "', ",
              "'PublicKey' : '",
              {
                "Ref": "S3Prefix"
              },
              {
                "Fn::FindInMap": [
                  "Function",
                  "Csr",
                  "PublicKey"
                ]
              },
              "' ",
              "}"
            ]
          ]
        }
      }
    },
    "CreateRandomPassword": {
      "Type": "Custom::LoadLambda",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "CreateRandomPassword": {
          "Fn::FindInMap": [
            "Function",
            "Csr",
            "PasswordLength"
          ]
        },
        "RandomPasswordSpecialCharacters": "False"
      }
    },
    "CiscoConfigFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "CiscoConfigFunctionRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "CiscoConfigFunctionRole"
          }
        ],
        "PolicyName": "Cisco_Config_Permissions",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DetachNetworkInterface",
                "ec2:DeleteNetworkInterface"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "VPNConfigS3Bucket"
                    },
                    "/",
                    {
                      "Ref": "S3Prefix"
                    },
                    "*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeTable",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "RouteDomainList"
                    }
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "CiscoConfigFunct": {
      "Type": "Custom::LoadLambda",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "LambdaCode": {
          "Fn::FindInMap": [
            "Function",
            "Configurator",
            "CodeLocation"
          ]
        },
        "LambdaCodeRegion": {
          "Fn::FindInMap": [
            "Function",
            "Configurator",
            "CodeRegion"
          ]
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-",
              {
                "Fn::FindInMap": [
                  "Function",
                  "Configurator",
                  "Name"
                ]
              }
            ]
          ]
        },
        "Role": {
          "Fn::GetAtt": [
            "CiscoConfigFunctionRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::FindInMap": [
            "Function",
            "Configurator",
            "Runtime"
          ]
        },
        "Description": {
          "Fn::FindInMap": [
            "Function",
            "Configurator",
            "Description"
          ]
        },
        "Timeout": {
          "Fn::FindInMap": [
            "Function",
            "Configurator",
            "Timeout"
          ]
        },
        "MemorySize": {
          "Fn::FindInMap": [
            "Function",
            "Configurator",
            "MemorySize"
          ]
        },
        "VpcConfig": {
          "Fn::Join": [
            "",
            [
              "{ 'SubnetIds': [",
              "'",
              {
                "Ref": "VPCPubSub1"
              },
              "',",
              "'",
              {
                "Ref": "VPCPubSub2"
              },
              "'],",
              "'SecurityGroupIds': [",
              "'",
              {
                "Ref": "CiscoConfigSecurityGroup"
              },
              "']",
              "}"
            ]
          ]
        },
        "S3Event": {
          "Fn::Join": [
            "",
            [
              "{ 'Bucket' : '",
              {
                "Ref": "VPNConfigS3Bucket"
              },
              "', ",
              "'EventPattern' : {",
              "'LambdaFunctionConfigurations' : [ {",
              "'LambdaFunctionArn': 'Replace_by_SolutionHelper',",
              "'Events': ['s3:ObjectCreated:Put' ],",
              "'Filter': {",
              "'Key': {",
              "'FilterRules': [ {",
              "'Name': 'prefix',",
              "'Value': '",
              {
                "Ref": "S3Prefix"
              },
              "'",
              "}, {",
              "'Name': 'suffix',",
              "'Value': '.conf'",
              "} ] } }",
              "} ] }",
              "}"
            ]
          ]
        },
        "StoreInS3KMS": {
          "Fn::Join": [
            "",
            [
              "[{ 'Bucket' : '",
              {
                "Ref": "VPNConfigS3Bucket"
              },
              "', ",
              "'Key' : '",
              {
                "Ref": "S3Prefix"
              },
              "transit_vpc_config.txt', ",
              "'SSEKMSKeyId' : 'arn:aws:kms:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":key/",
              {
                "Ref": "KMSKey"
              },
              "', ",
              "'Body': \"{",
              "'UUID':'",
              {
                "Fn::GetAtt": [
                  "CreateUniqueID",
                  "UUID"
                ]
              },
              "',",
              "'SENDDATA':'",
              {
                "Ref": "SendAnonymousData"
              },
              "',",
              "'EIP1':'",
              {"Fn::FindInMap":["CsrInstance","CSR1","EIP"]},
              "',",
              "'EIP2':'",
              {"Fn::FindInMap":["CsrInstance","CSR2","EIP"]},
              "',",
              "'PIP1':'",
              {
                "Fn::GetAtt": [
                  "VpcCsr1",
                  "PrivateIp"
                ]
              },
              "',",
              "'PIP2':'",
              {
                "Fn::GetAtt": [
                  "VpcCsr2",
                  "PrivateIp"
                ]
              },
              "',",
              "'BGP_ASN':",
              {
                "Ref": "BgpAsn"
              },
              ",",
              "'PREFERRED_PATH_TAG':'",
              {
                "Ref": "PreferredPathTag"
              },
              "',",
              "'HUB_TAG':'",
              {
                "Ref": "SpokeTag"
              },
              "',",
              "'HUB_TAG_VALUE':'",
              {
                "Ref": "SpokeTagValue"
              },
              "',",
              "'RD_TAG':'",
              {
                "Ref": "RDTag"
              },
              "',",
              "'USER_NAME':'",
              {
                "Fn::FindInMap": [
                  "Function",
                  "Csr",
                  "UserName"
                ]
              },
              "',",
              "'PRIVATE_KEY':'",
              {
                "Fn::FindInMap": [
                  "Function",
                  "Csr",
                  "PrivateKey"
                ]
              },
              "',",
              "'PUBLIC_KEY':'",
              {
                "Fn::GetAtt": [
                  "CreateRsaKey",
                  "PubKey"
                ]
              },
              "',",
              "'PASSWORD':'",
              {
                "Fn::GetAtt": [
                  "CreateRandomPassword",
                  "Password"
                ]
              },
              "',",
              "'RD_LIST':'",
              {
                "Ref": "RouteDomainList"
              },
              "',",
              "'KMS_KEY':'arn:aws:kms:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":key/",
              {
                "Ref": "KMSKey"
              },
              "'",
              "}\"",
              "}]"
            ]
          ]
        }
      }
    },
    "EdcVpnCSR1": {
      "Type": "Custom::VPN",
      "DependsOn" : ["CiscoConfigFunct","VpcCsr1","VpcCsr2"],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "StoreInS3KMS": {
          "Fn::Join": [
            "",
            [
              "[{ 'Bucket' : '",
              {
                "Ref": "VPNConfigS3Bucket"
              },
              "', ",
              "'Key' : '",
              {
                "Ref": "S3Prefix"
              },
              "CSR1/",
              "edc-dev-vpn.conf', ",
              "'SSEKMSKeyId' : 'arn:aws:kms:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":key/",
              {
                "Ref": "KMSKey"
              },
              "', ",
              "'Body': '",
              "<?xml version=\"1.0\" ?><vpn_connection id=\"edc-dcx-dev\">",
  "<customer_gateway_id>transit-csr1</customer_gateway_id>",
  "<vpn_gateway_id>edc-dcx-endpoint</vpn_gateway_id>",
  "<vpn_connection_type>ipsec.1</vpn_connection_type>",
  "<ipsec_tunnel>",
    "<customer_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["CsrInstance","CSR1","IPAddress"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","CsrTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","CsrTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Ref":"BgpAsn"},"</asn><hold_time>30</hold_time></bgp>",
    "</customer_gateway><vpn_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","EndPointIp"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","EdcTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","EdcTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","EdcBgpAsn"]},"</asn><hold_time>30</hold_time></bgp>",
    "</vpn_gateway>",
    "<ike><authentication_protocol>sha256</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>28800</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>main</mode><pre_shared_key>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","PreSharedKey"]},"</pre_shared_key></ike>",
    "<ipsec><protocol>esp</protocol><authentication_protocol>hmac-sha256-96</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>3600</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>tunnel</mode><clear_df_bit>true</clear_df_bit><fragmentation_before_encryption>true</fragmentation_before_encryption><tcp_mss_adjustment>1379</tcp_mss_adjustment>",
      "<dead_peer_detection><interval>10</interval><retries>3</retries></dead_peer_detection>",
    "</ipsec></ipsec_tunnel>",
              "<ipsec_tunnel>",
    "<customer_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["CsrInstance","CSR1","IPAddress"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcBakupCsr1","CsrTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcBakupCsr1","CsrTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Ref":"BgpAsn"},"</asn><hold_time>30</hold_time></bgp>",
    "</customer_gateway><vpn_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcBakupCsr1","EndPointIp"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcBakupCsr1","EdcTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcBakupCsr1","EdcTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Fn::FindInMap": ["VPN","EdcDcxMgmtCsr1","EdcBgpAsn"]},"</asn><hold_time>30</hold_time></bgp>",
    "</vpn_gateway>",
    "<ike><authentication_protocol>sha256</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>28800</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>main</mode><pre_shared_key>",{"Fn::FindInMap": ["VPN","EdcBakupCsr1","PreSharedKey"]},"</pre_shared_key></ike>",
    "<ipsec><protocol>esp</protocol><authentication_protocol>hmac-sha256-96</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>3600</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>tunnel</mode><clear_df_bit>true</clear_df_bit><fragmentation_before_encryption>true</fragmentation_before_encryption><tcp_mss_adjustment>1379</tcp_mss_adjustment>",
      "<dead_peer_detection><interval>10</interval><retries>3</retries></dead_peer_detection>",
    "</ipsec></ipsec_tunnel>",
  "<transit_vpc_config><account_id>228198000189</account_id><vpn_endpoint>CSR1</vpn_endpoint><status>create</status><preferred_path>none</preferred_path><route_domain>",{"Fn::FindInMap": ["RouteDomains","Development","Name"]},"</route_domain><domain_asn>",{"Ref": "BgpAsn"},":",{"Fn::FindInMap": ["RouteDomains","Development","RDNum"]},"</domain_asn></transit_vpc_config></vpn_connection>",
              "'",
              "}]"
            ]
          ]
        }
      }
    },
    "EdcVpnCSR2": {
      "Type": "Custom::VPN",
      "DependsOn" : ["CiscoConfigFunct","VpcCsr1","VpcCsr2"],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "StoreInS3KMS": {
          "Fn::Join": [
            "",
            [
              "[{ 'Bucket' : '",
              {
                "Ref": "VPNConfigS3Bucket"
              },
              "', ",
              "'Key' : '",
              {
                "Ref": "S3Prefix"
              },
              "CSR2/",
              "edc-dev-vpn.conf', ",
              "'SSEKMSKeyId' : 'arn:aws:kms:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":key/",
              {
                "Ref": "KMSKey"
              },
              "', ",
              "'Body': '",
              "<?xml version=\"1.0\" ?><vpn_connection id=\"edc-dcx-dev\">",
  "<customer_gateway_id>transit-csr1</customer_gateway_id>",
  "<vpn_gateway_id>edc-dcx-endpoint</vpn_gateway_id>",
  "<vpn_connection_type>ipsec.1</vpn_connection_type>",
  "<ipsec_tunnel>",
    "<customer_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["CsrInstance","CSR2","IPAddress"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr2","CsrTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr2","CsrTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Ref":"BgpAsn"},"</asn><hold_time>30</hold_time></bgp>",
    "</customer_gateway><vpn_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr2","EndPointIp"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr2","EdcTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr2","EdcTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr2","EdcBgpAsn"]},"</asn><hold_time>30</hold_time></bgp>",
    "</vpn_gateway>",
    "<ike><authentication_protocol>sha256</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>28800</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>main</mode><pre_shared_key>",{"Fn::FindInMap": ["VPN","EdcDcxDevCsr1","PreSharedKey"]},"</pre_shared_key></ike>",
    "<ipsec><protocol>esp</protocol><authentication_protocol>hmac-sha256-96</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>3600</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>tunnel</mode><clear_df_bit>true</clear_df_bit><fragmentation_before_encryption>true</fragmentation_before_encryption><tcp_mss_adjustment>1379</tcp_mss_adjustment>",
      "<dead_peer_detection><interval>10</interval><retries>3</retries></dead_peer_detection>",
    "</ipsec></ipsec_tunnel>",
              "<ipsec_tunnel>",
    "<customer_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["CsrInstance","CSR2","IPAddress"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcBakupCsr2","CsrTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcBakupCsr2","CsrTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Ref":"BgpAsn"},"</asn><hold_time>30</hold_time></bgp>",
    "</customer_gateway><vpn_gateway><tunnel_outside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcBakupCsr2","EndPointIp"]},"</ip_address></tunnel_outside_address>",
      "<tunnel_inside_address><ip_address>",{"Fn::FindInMap": ["VPN","EdcBakupCsr2","EdcTunnelIp"]},"</ip_address><network_mask>",{"Fn::FindInMap": ["VPN","EdcBakupCsr2","EdcTunnelIpMask"]},"</network_mask><network_cidr>30</network_cidr></tunnel_inside_address>",
      "<bgp><asn>",{"Fn::FindInMap": ["VPN","EdcBakupCsr2","EdcBgpAsn"]},"</asn><hold_time>30</hold_time></bgp>",
    "</vpn_gateway>",
    "<ike><authentication_protocol>sha256</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>28800</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>main</mode><pre_shared_key>",{"Fn::FindInMap": ["VPN","EdcBakupCsr2","PreSharedKey"]},"</pre_shared_key></ike>",
    "<ipsec><protocol>esp</protocol><authentication_protocol>hmac-sha256-96</authentication_protocol><encryption_protocol>aes-256-cbc</encryption_protocol><lifetime>3600</lifetime><perfect_forward_secrecy>group2</perfect_forward_secrecy><mode>tunnel</mode><clear_df_bit>true</clear_df_bit><fragmentation_before_encryption>true</fragmentation_before_encryption><tcp_mss_adjustment>1379</tcp_mss_adjustment>",
      "<dead_peer_detection><interval>10</interval><retries>3</retries></dead_peer_detection>",
    "</ipsec></ipsec_tunnel>",
  "<transit_vpc_config><account_id>228198000189</account_id><vpn_endpoint>CSR1</vpn_endpoint><status>create</status><preferred_path>none</preferred_path><route_domain>",{"Fn::FindInMap": ["RouteDomains","Development","Name"]},"</route_domain><domain_asn>",{"Ref": "BgpAsn"},":",{"Fn::FindInMap": ["RouteDomains","Development","RDNum"]},"</domain_asn></transit_vpc_config></vpn_connection>",
              "'",
              "}]"
            ]
          ]
        }
      }
    },
    "DevRouteDomain": {
      "Type": "Custom::RouteDomain",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "StoreInDDB": {
          "Fn::Join" : [ "",[
          "{'TableName': '",{"Ref": "RouteDomainList"},"',",
          "'Item': {'rd_name': {'S':'",{"Fn::FindInMap": ["RouteDomains","Development","Name"]},"'},'vrf_asn':{'S':'",{"Ref": "BgpAsn"},":",{"Fn::FindInMap": ["RouteDomains","Development","RDNum"]},"'}}}"]]}
        }
      },
    "DevMgmtRouteDomain": {
      "Type": "Custom::RouteDomain",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "StoreInDDB": {
          "Fn::Join" : [ "",[
          "{'TableName': '",{"Ref": "RouteDomainList"},"',",
          "'Item': {'rd_name': {'S':'",{"Fn::FindInMap": ["RouteDomains","DevelopmentMgmt","Name"]},"'},'vrf_asn':{'S':'",{"Ref": "BgpAsn"},":",{"Fn::FindInMap": ["RouteDomains","DevelopmentMgmt","RDNum"]},"'}}}"]]}
        }
      },
    "ProdRouteDomain": {
      "Type": "Custom::RouteDomain",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "StoreInDDB": {
          "Fn::Join" : [ "",[
          "{'TableName': '",{"Ref": "RouteDomainList"},"',",
          "'Item': {'rd_name': {'S':'",{"Fn::FindInMap": ["RouteDomains","Production","Name"]},"'},'vrf_asn':{'S':'",{"Ref": "BgpAsn"},":",{"Fn::FindInMap": ["RouteDomains","Production","RDNum"]},"'}}}"]]}
        }
      },
    "ProdMgmtRouteDomain": {
      "Type": "Custom::RouteDomain",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "StoreInDDB": {
          "Fn::Join" : [ "",[
          "{'TableName': '",{"Ref": "RouteDomainList"},"',",
          "'Item': {'rd_name': {'S':'",{"Fn::FindInMap": ["RouteDomains","ProductionMgmt","Name"]},"'},'vrf_asn':{'S':'",{"Ref": "BgpAsn"},":",{"Fn::FindInMap": ["RouteDomains","ProductionMgmt","RDNum"]},"'}}}"]]}
        }
      },
    "TransitVpcPollerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "TransitVpcPollerRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "TransitVpcPollerRole"
          }
        ],
        "PolicyName": "Transit_VPC_Poller_Function_Permissions",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:Describe*",
                "ec2:CreateTags",
                "ec2:CreateCustomerGateway",
                "ec2:DeleteCustomerGateway",
                "ec2:CreateVpnConnection",
                "ec2:DeleteVpnConnection"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "VPNConfigS3Bucket"
                    },
                    "/",
                    {
                      "Ref": "S3Prefix"
                    },
                    "*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeTable",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "RouteDomainList"
                    }
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": "sts:AssumeRole",
              "Resource": "arn:aws:iam::660369111642:role/ListOrganizations"
            }
          ]
        }
      }
    },
    "TransitVpcPollerXAccountPolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
	  "Roles" : [ { "Ref" : "TransitVpcPollerRole" } ],
          "PolicyName": "TransitPollerXAccount",
          "PolicyDocument": {
              "Version" : "2012-10-17",
	      "Statement": [
		{
		  "Effect": "Allow",
		  "Action": "sts:AssumeRole",
		  "Resource" : {"Fn::Join":["",[ "arn:aws:iam::", {"Ref": "AWS::AccountId"}, ":role/TransitXAccountPollerRole"]]}
		}
	     ]
        }
      }
    },
    "PollerFunct": {
      "DependsOn": "CiscoConfigFunct",
      "Type": "Custom::LoadLambda",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "LambdaCode": {
          "Fn::FindInMap": [
            "Function",
            "Poller",
            "CodeLocation"
          ]
        },
        "LambdaCodeRegion": {
          "Fn::FindInMap": [
            "Function",
            "Poller",
            "CodeRegion"
          ]
        },
        "Deliminator": {
          "Fn::FindInMap": [
            "Function",
            "FindReplace",
            "Deliminator"
          ]
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-",
              {
                "Fn::FindInMap": [
                  "Function",
                  "Poller",
                  "Name"
                ]
              }
            ]
          ]
        },
        "Role": {
          "Fn::GetAtt": [
            "TransitVpcPollerRole",
            "Arn"
          ]
        },
        "CloudWatchEvent": {
          "Fn::Join": [
            "",
            [
              "{ 'RuleName' : '",
              {
                "Ref": "AWS::StackName"
              },
              "-VGW-Poller-1min', ",
              "'ScheduleExpression' : 'cron(* * * * ? *)',",
              "'Description': 'Transit VPC: Rule to trigger VGW-Poller every minute to find VGWs that need to be attached to the transit VPC.' }"
            ]
          ]
        },
        "Runtime": {
          "Fn::FindInMap": [
            "Function",
            "Poller",
            "Runtime"
          ]
        },
        "Description": {
          "Fn::FindInMap": [
            "Function",
            "Poller",
            "Description"
          ]
        },
        "Timeout": {
          "Fn::FindInMap": [
            "Function",
            "Poller",
            "Timeout"
          ]
        },
        "MemorySize": {
          "Fn::FindInMap": [
            "Function",
            "Poller",
            "MemorySize"
          ]
        },
        "FindReplace": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "S3BucketID"
                ]
              },
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "Deliminator"
                ]
              },
              {
                "Ref": "VPNConfigS3Bucket"
              },
              ",",
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "S3PrefixID"
                ]
              },
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "Deliminator"
                ]
              },
              {
                "Ref": "S3Prefix"
              }
            ]
          ]
        }
      }
    },
    "TransitVpcAccountUpdateRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "TransitVpcAccountUpdateRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "TransitVpcAccountUpdateRole"
          }
        ],
        "PolicyName": "Transit_VPC_Account_Update_Function_Permissions",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "iam:GetRolePolicy",
                "iam:CreatePolicy",
                "iam:CreatePolicyVersion",
                "iam:DeletePolicyVersion",
                "iam:DeleteRolePolicy",
                "iam:AttachRolePolicy",
                "iam:PutRolePolicy"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "sts:AssumeRole",
              "Resource": "arn:aws:iam::660369111642:role/ListOrganizations"
            }
          ]
        }
      }
    },
     "PeeringFunct": {
      "DependsOn": "CiscoConfigFunct",
      "Type": "Custom::LoadLambda",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "LambdaCode": {
          "Fn::FindInMap": [
            "Function",
            "PeeringManager",
            "CodeLocation"
          ]
        },
        "LambdaCodeRegion": {
          "Fn::FindInMap": [
            "Function",
            "PeeringManager",
            "CodeRegion"
          ]
        },
        "Deliminator": {
          "Fn::FindInMap": [
            "Function",
            "FindReplace",
            "Deliminator"
          ]
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-",
              {
                "Fn::FindInMap": [
                  "Function",
                  "PeeringManager",
                  "Name"
                ]
              }
            ]
          ]
        },
        "Role": {
          "Fn::GetAtt": [
            "TransitVpcPeeringRole",
            "Arn"
          ]
        },
        "CloudWatchEvent": {
          "Fn::Join": [
            "",
            [
              "{ 'RuleName' : '",
              {
                "Ref": "AWS::StackName"
              },
              "-VGW-Peering-1hr', ",
              "'ScheduleExpression' : 'cron(0 0 0/1 1/1 * ? *)',",
              "'Description': 'Transit VPC: Rule to trigger Peering Manager.' }"
            ]
          ]
        },
        "Runtime": {
          "Fn::FindInMap": [
            "Function",
            "PeeringManager",
            "Runtime"
          ]
        },
        "Description": {
          "Fn::FindInMap": [
            "Function",
            "PeeringManager",
            "Description"
          ]
        },
        "Timeout": {
          "Fn::FindInMap": [
            "Function",
            "PeeringManager",
            "Timeout"
          ]
        },
        "MemorySize": {
          "Fn::FindInMap": [
            "Function",
            "PeeringManager",
            "MemorySize"
          ]
        },
        "FindReplace": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "S3BucketID"
                ]
              },
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "Deliminator"
                ]
              },
              {
                "Ref": "VPNConfigS3Bucket"
              },
              ",",
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "S3PrefixID"
                ]
              },
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "Deliminator"
                ]
              },
              {
                "Ref": "S3Prefix"
              }
            ]
          ]
        }
      }
    },
    "TransitVpcPeeringRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "TransitVpcPollerRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "TransitVpcPeeringRole"
          }
        ],
        "PolicyName": "Transit_VPC_Peering_Function_Permissions",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "VPNConfigS3Bucket"
                    },
                    "/",
                    {
                      "Ref": "S3Prefix"
                    },
                    "*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeTable",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "RouteDomainList"
                    }
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "AccountUpdateFunct": {
      "Type": "Custom::LoadLambda",
      "DependsOn": "PollerFunct",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "LambdaCode": {
          "Fn::FindInMap": [
            "Function",
            "AccountUpdate",
            "CodeLocation"
          ]
        },
        "LambdaCodeRegion": {
          "Fn::FindInMap": [
            "Function",
            "AccountUpdate",
            "CodeRegion"
          ]
        },
        "Deliminator": {
          "Fn::FindInMap": [
            "Function",
            "FindReplace",
            "Deliminator"
          ]
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-",
              {
                "Fn::FindInMap": [
                  "Function",
                  "AccountUpdate",
                  "Name"
                ]
              }
            ]
          ]
        },
        "Role": {
          "Fn::GetAtt": [
            "TransitVpcAccountUpdateRole",
            "Arn"
          ]
        },
        "CloudWatchEvent": {
          "Fn::Join": [
            "",
            [
              "{ 'RuleName' : '",
              {
                "Ref": "AWS::StackName"
              },
              "-AccountUpdate-1min', ",
              "'ScheduleExpression' : 'cron(* * * * ? *)',",
              "'Description': 'Transit VPC: Rule to trigger AccountUpdate every minute to find VGWs that need to be attached to the transit VPC.' }"
            ]
          ]
        },
        "Runtime": {
          "Fn::FindInMap": [
            "Function",
            "AccountUpdate",
            "Runtime"
          ]
        },
        "Description": {
          "Fn::FindInMap": [
            "Function",
            "AccountUpdate",
            "Description"
          ]
        },
        "Timeout": {
          "Fn::FindInMap": [
            "Function",
            "AccountUpdate",
            "Timeout"
          ]
        },
        "MemorySize": {
          "Fn::FindInMap": [
            "Function",
            "AccountUpdate",
            "MemorySize"
          ]
        },
        "FindReplace": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "AccountUpdateRoleName"
                ]
              },
              {
                "Fn::FindInMap": [
                  "Function",
                  "FindReplace",
                  "Deliminator"
                ]
              },
              {
               "Ref" : "TransitVpcPollerRole"
              }
            ]
          ]
        }
      }
    },
    "DCXVif": {
      "Type": "Custom::DCXVif",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DCXHelperFunction",
            "Arn"
          ]
        },
        "VGW": {
          "Ref": "TransitVGW"
        },
        "VLAN": {
          "Ref": "DCXVLAN"
        },
        "ASN": {
          "Ref": "DCXASN"
        },
        "BGPAuthKey": {
          "Ref": "DCXBGPAuthKey"
        },
        "AmazonAddress": {
          "Ref": "DCXAWSAddress"
        },
        "CustomerAddress": {
          "Ref": "DCXCustAddress"
        },
        "AddressFamily": {
          "Ref": "DCXIPFamily"
        }
      }
    },
    "DCXHelperFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "DCXHelperRolePolicy",
      "Properties": {
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-",
              {
                "Fn::FindInMap": [
                  "Function",
                  "DCX-Helper",
                  "Name"
                ]
              }
            ]
          ]
        },
          "Code": {"S3Bucket": "edc-lambdacode", "S3Key" :"dcx-helper.zip" },
        "Handler": "dcx-helper.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "DCXHelperRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::FindInMap": [
            "Function",
            "DCX-Helper",
            "Runtime"
          ]
        },
        "Description": {
          "Fn::FindInMap": [
            "Function",
            "DCX-Helper",
            "Description"
          ]
        },
        "Timeout": {
          "Fn::FindInMap": [
            "Function",
            "DCX-Helper",
            "Timeout"
          ]
        },
        "MemorySize": {
          "Fn::FindInMap": [
            "Function",
            "DCX-Helper",
            "MemorySize"
          ]
        }
      }
    },
    "DCXHelperRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "DCXHelperRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "DCXHelperRole"
          }
        ],
        "PolicyName": "DCX_Helper_Permissions",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": "directconnect:*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "CSRSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CSR Security Group Rules",
        "VpcId": {
          "Ref": "TransitVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "CiscoConfigSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "CiscoConfigSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Transit VPC Automation Security Group Rules",
        "VpcId": {
          "Ref": "TransitVPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SSHtoCSR": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "CSRSecurityGroup",
            "GroupId"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "CiscoConfigSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "CSR1RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when CSR1 instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "VpcCsr1"
            }
          }
        ]
      }
    },
    "CSR2RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when CSR2 instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "VpcCsr2"
            }
          }
        ]
      }
    },
    "CreateUniqueID": {
      "Type": "Custom::LoadLambda",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "CreateUniqueID": "true"
      }
    },
    "SendingData": {
      "Type": "Custom::LoadLambda",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn"
          ]
        },
        "SendAnonymousData": {
          "Fn::Join": [
            "",
            [
              "{ 'Solution' : '",
              "SO0001",
              "', ",
              "'UUID' : '",
              {
                "Fn::GetAtt": [
                  "CreateUniqueID",
                  "UUID"
                ]
              },
              "', ",
              "'Data': {",
              "'CSRType': '",
              {
                "Ref": "CSRType"
              },
              "',",
              "'LicenseModel': '",
              {
                "Ref": "LicenseModel"
              },
              "'",
              "'TerminationProtection': '",
              {
                "Ref": "TerminationProtection"
              },
              "'",
              "'SendAnonymousData': '",
              {
                "Ref": "SendAnonymousData"
              },
              "'",
              "}",
              "}"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "CSR1": {
      "Description": "IP Address for CSR1",
      "Value": {
        "Fn::GetAtt": [
          "VpcCsr1",
          "PublicIp"
        ]
      }
    },
    "CSR2": {
      "Description": "IP Address for CSR2",
      "Value": {
        "Fn::GetAtt": [
          "VpcCsr2",
          "PublicIp"
        ]
      }
    },
    "ConfigS3Bucket": {
      "Description": "S3 bucket for storing VPN configuration information.",
      "Value": {
        "Ref": "VPNConfigS3Bucket"
      }
    },
    "BucketPrefix": {
      "Description": "S3 prefix for storing VPN configuration information.",
      "Value": {
        "Ref": "S3Prefix"
      }
    },
    "SpokeVPCTag": {
      "Description": "Tag used to identify spoke VPCs.",
      "Value": {
        "Ref": "SpokeTag"
      }
    },
    "SpokeVPCTagValue": {
      "Description": "Tag valued used to idenfity spoke VPCs.",
      "Value": {
        "Ref": "SpokeTagValue"
      }
    },
    "RDTag": {
      "Description": "Tag used to identify spoke VPCs Route Domain.",
      "Value": {
        "Ref": "RDTag"
      }
    },
    "PreferredPathTagName": {
      "Description": "Tag used to identify the spoke VPC preferred path.",
      "Value": {
        "Ref": "PreferredPathTag"
      }
    },
    "UUID": {
      "Description": "Newly created random UUID.",
      "Value": {
        "Fn::GetAtt": [
          "CreateUniqueID",
          "UUID"
        ]
      }
    },
    "VirtualGateway": {
      "Description": "Transit VPC Virtual Private Gateway",
      "Value": {
        "Ref": "TransitVGW"
      }
    },
    "DCXVirtualInterface": {
      "Description" : "Direct Connect Virtual Interface",
      "Value": { "Fn::GetAtt": ["DCXVif", "DCXVifId"]}
    }
  }
}

